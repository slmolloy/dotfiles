#!/usr/bin/env bash

current_dir=`pwd`
java_package='openjdk-7-jdk'

function dot_files {
    sudo apt-get install -y vim git ctags

    # VIM
    ln -svf $current_dir/vimrc ~/.vimrc
    ln -svfn $current_dir/vim ~/.vim
    if [ ! -d ~/.vim/bundle/darcula ]
    then
        git clone https://github.com/blueshirts/darcula.git ~/.vim/bundle/darcula
    fi
    if [ ! -d ~/.vim/bundle/syntastic ]
    then
        git clone https://github.com/scrooloose/syntastic.git ~/.vim/bundle/syntastic
    fi

    # /etc/profile.d
    sudo ln -svf $current_dir/profile.d/appengine.sh /etc/profile.d/appengine.sh

    # /etc/udev/rules.d
    sudo ln -svf $current_dir/rules.d/51-android.rules /etc/udev/rules.d/51-android.rules
    sudo ln -svf $current_dir/rules.d/51-arduino.rules /etc/udev/rules.d/51-arduino.rules
    sudo ln -svf $current_dir/rules.d/91-garmin.rules /etc/udev/rules.d/91-garmin.rules

    # Dotfiles
    ln -svf $current_dir/gitconfig ~/.gitconfig

    # Bash
    if grep -xq ".*.bashrc.d.*" ~/.bashrc
    then
        printf "Loop through .bashrc.d already exists\n"
    else
        printf "Adding loop through .bashrc.d\n"
        cat $current_dir/bashrc_section >> ~/.bashrc
    fi
    mkdir -p ~/.bashrc.d
    ln -svf $current_dir/bashrc.d/1-colors.sh ~/.bashrc.d/1-colors.sh
    ln -svf $current_dir/bashrc.d/2-prompt.sh ~/.bashrc.d/2-prompt.sh
}

# Python Environment
function python_env {
    sudo apt-get install virtualenv-clone virtualenvwrapper
    mkdir -p $HOME/.virtualenv
    mkdir -p $HOME/virtualenv-projects
    sudo ln -svf $current_dir/profile.d/virtualenv.sh /etc/profile.d/virtualenv.sh

    if [ ! -d ~/.pyenv ]
    then
        git clone https://github.com/yyuu/pyenv.git ~/.pyenv
    fi
    mkdir -p ~/.bashrc.d
    ln -svf $current_dir/bashrc.d/2-pyenv.sh ~/.bashrc.d/2-pyenv.sh
}

# Setup PyCharm
function pycharm_ide {
    pycharm_file="pycharm-professional-4.5.4.tar.gz"

    sudo apt-get install -y $java_package

    mkdir -p ~/Downloads
    if [ ! -f ~/Downloads/$pycharm_file ]
    then
        printf "Downloading $pycharm_file\n"
        wget -P ~/Downloads https://download.jetbrains.com/python/$pycharm_file
    else
        printf "PyCharm already downloaded\n"
    fi
    printf "Unzipping $pycharm_file\n"
    tar -xf ~/Downloads/$pycharm_file -C ~/Downloads
    sudo find ~/Downloads -name pycharm* -type d -execdir mv {} /opt/pycharm \;
    /opt/pycharm/bin/pycharm.sh &
}

# Setup WebStorm
function webstorm_ide {
    webstorm_file="WebStorm-10.0.4.tar.gz"

    sudo apt-get install -y $java_package

    mkdir -p ~/Downloads
    if [ ! -f ~/Downloads/$webstorm_file ]
    then
        printf "Downloading $webstorm_file\n"
        wget -P ~/Downloads https://download.jetbrains.com/webstorm/$webstorm_file
    else
        printf "WebStorm already downloaded\n"
    fi
    printf "Unzipping $webstorm_file\n"
    tar -xf ~/Downloads/$webstorm_file -C ~/Downloads
    sudo find ~/Downloads -name WebStorm* -type d -execdir mv {} /opt/webstorm \;
    /opt/webstorm/bin/webstorm.sh &
}

# MongoDB
function mongodb {
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    sudo ln -svf $current_dir/apt/sources.list.d/mongodb-org-3.0.list /etc/apt/sources.list.d/mongodb-org-3.0.list
    sudo apt-get update
    sudo apt-get install mongodb-org
}

# Android SDK
function android {
    # Check to see if ANDROID_HOME exists and is a valid directory
    if [ ! -z $ANDROID_HOME ] && [ -d $ANDROID_HOME ]
    then
        printf "Android SDK already exists at $ANDROID_HOME\n"
        return
    fi

    # If ANDROID_HOME does not exists or is not a directory then install
    sdk_dir="/opt/android-sdk"
    sdk_file="android-sdk_r24.4-linux.tgz"

    # Link Android configuration file
    sudo ln -svf $current_dir/profile.d/android.sh /etc/profile.d/android.sh

    sudo apt-get install -y $java_package

    mkdir -p ~/Downloads
    if [ ! -f ~/Downloads/$sdk_file ]
    then
        printf "Downloading $sdk_file\n"
        wget -P ~/Downloads http://dl.google.com/android/$sdk_file
    else
        printf "Android SDK already downloaded to ~/Downloads/$sdk_file\n"
    fi
    printf "Unzipping $sdk_file\n"
    tar -xf ~/Downloads/$sdk_file -C ~/Downloads
    printf "Moving Android SDK to $sdk_dir\n"
    sudo mv ~/Downloads/android-sdk-linux $sdk_dir
}

# Android Studio Install
function android_studio {
    android_studio_file="android-studio-ide-141.2288178-linux.zip"

    sudo apt-get install -y $java_package

    mkdir -p ~/Downloads
    if [ ! -f ~/Downloads/$android_studio_file ]
    then
        printf "Downloading $android_studio_file\n"
        wget -P ~/Downloads https://dl.google.com/dl/android/studio/ide-zips/1.4.0.10/$android_studio_file
    else
        printf "Android Studio already downloaded\n"
    fi
    printf "Unzipping $android_studio_file\n"
    unzip ~/Downloads/$android_studio_file -d ~/Downloads
    sudo mv ~/Downloads/android-studio /opt
    /opt/android-studio/bin/studio.sh &
}

# Gradle
function gradle {
    # Check to see if GRADLE_HOME exists and is a valid directory
    if [ ! -z $GRADLE_HOME ] && [ -d $GRADLE_HOME ]
    then
        printf "Gradle already exists at $GRADLE_HOME\n"
        return
    fi

    # If GRADLE_HOME does not exist or is not a directory then install
    gradle_dir="/usr/local/gradle"
    gradle_file="gradle-2.7-all.zip"

    # Link Gradle configuration file
    sudo ln -svf $current_dir/profile.d/gradle.sh /etc/profile.d/gradle.sh

    sudo apt-get install -y $java_package
    mkdir -p ~/Downloads
    if [ ! -f ~/Downloads/$gradle_file ]
    then
        printf "Downloading $gradle_file\n"
        wget -P ~/Downloads https://services.gradle.org/distributions/$gradle_file
    else
        printf "Gradle already downloaded to ~/Downloads/$gradle_file\n"
    fi
    printf "Unzipping $gradle_file\n"
    sudo unzip ~/Downloads/$gradle_file -d /usr/local/gradle/
}

# Vagrant and Virtualbox
function virtual {
    sudo apt-get install -y virtualbox vagrant
    #vagrant box add ubuntu/trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
    #vagrant init ubuntu/trusty64
}

# Docker setup
function docker_install {
    if command -v docker >/dev/null 2>&1
    then
        printf "docker already installed\n"
    else
        printf "Downloading and installing docker\n"
        sudo apt-get install wget
        wget -qO- https://get.docker.com/ | sh
        sudo usermod -aG docker $USER
    fi

    if command -v docker-compose >/dev/null 2>&1
    then
        printf "docker-compose already installed\n"
    else
        printf "Downloading and installing docker-compose\n"
        mkdir -p ~/Downloads
        curl -L https://github.com/docker/compose/releases/download/1.4.2/docker-compose-`uname -s`-`uname -m` > ~/Downloads/docker-compose
        chmod +x ~/Downloads/docker-compose
        sudo mv ~/Downloads/docker-compose /usr/local/bin/
    fi
}

# Setup Wake-On-Lan
function wakeonlan {
    if command -v etherwake >/dev/null 2>&1
    then
        printf "etherwake already installed\n"
    else
        printf "Downloading and installing etherwake\n"
        sudo apt-get install -y etherwake
    fi
    mkdir -p ~/.bashrc.d
    ln -svf $current_dir/bashrc.d/2-wol.sh ~/.bashrc.d/2-wol.sh
}

# Install Chrome Browser
function chrome {
    mkdir ~/Downloads
    wget -P ~/Downloads https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo dpkg -i ~/Downloads/google-chrome-stable_current_amd64.deb
    sudo apt-get install -fy
}

# Install Dropbox
function dropbox_install {
    mkdir ~/Downloads
    wget -P ~/Downloads https://linux.dropbox.com/packages/ubuntu/dropbox_2015.02.12_amd64.deb
    sudo dpkg -i ~/Downloads/dropbox_2015.02.12_amd64.deb
    sudo apt-get install -fy
}

# Install packages
function install {
    sudo apt-get update
    sudo apt-get install -y build-essential cmake ctags make python-dev curl vim git
}

# Help usage message
function usage {
    format="%-16s%-64s\n"
    printf "Usage: setup [OPTIONS]\n\n"
    printf "Options available:\n"
    printf $format "  -all" "Install all options"
    printf $format "  -android" "Install Andriod SDK and configure ANDROID_HOME"
    printf $format "  -android-studio" "Install Android Studio"
    printf $format "  -chrome" "Install the Chrome Browser"
    printf $format "  -docker" "Install Docker"
    printf $format "  -dotfiles" "Symbolic link dotfiles"
    printf $format "  -dropbox" "Install Dropbox"
    printf $format "  -install" "Install packages with apt-get"
    printf $format "  -gradle" "Install Gradle and configure to run as daemon"
    printf $format "  -mongodb" "Setup apt sources list to include mongodb"
    printf $format "  -pycharm" "Install JetBrains PyCharm"
    printf $format "  -python" "Setup python virtualenv"
    printf $format "  -virtual" "Setup Vagrant and Virtualbox"
    printf $format "  -webstorm" "Install JetBrains Webstorm"
    printf $format "  -wol" "Wake-On-Lan install and config wake_on_lan_* functions"

    printf $format "  -h, --help" "This help message"
}

# Error encountered
function error {
    printf "setup: invalid option -- '$1'\nTry 'setup -h' for more information.\n"
}


# Update cached credentials right away
# If needed, user will be prompted for password
# This prevents password prompt from appearing mid install
sudo -v


# Default option, if no arguments are provided then install dot_files
if [ "$#" -eq 0 ]
then
    printf "\nSetting up dot files.\nFor additional usages use -h flag.\n\n"
    dot_files
fi

# Install dependancies for each argument
for i in "$@"
do
    case $i in
        -all)
            dot_files
            android
            mongodb
            python_env
            install
            ;;
        -android)
            android
            ;;
        -android-studio)
            android_studio
            ;;
        -chrome)
            chrome
            ;;
        -docker)
            docker_install
            ;;
        -dotfiles)
            dot_files
            ;;
        -dropbox)
            dropbox_install
            ;;
        -install)
            install
            ;;
        -gradle)
            gradle
            ;;
        -mongodb)
            mongodb
            ;;
        -pycharm)
            pycharm_ide
            ;;
        -python)
            python_env
            ;;
        -virtual)
            virtual
            ;;
        -webstorm)
            webstorm_ide
            ;;
        -wol)
            wakeonlan
            ;;
        -h|-help|--help)
            usage
            ;;
        *)
            error $i
            ;;
    esac
done
